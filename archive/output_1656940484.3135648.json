{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371f4acd0>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371ed7160>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_purchace_place", "rerun": "0"}}, "suite_name": "tests/integration_tests/test_integration.py"}, "1": {"suite_name": "tests/unit_tests/test_board_points.py", "tests": {"0": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371e5e670>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371e5eaf0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_access_board_points_page", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "2": {"suite_name": "tests/unit_tests/test_booking.py", "tests": {"0": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371eb57f0>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371eb5c10>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_not_access_booking_page_for_past_competitions", "rerun": "0"}, "1": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371ed7700>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371ed7a00>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_be_able_to_access_booking_page_for_futur_competitions", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}, "3": {"suite_name": "tests/unit_tests/test_login.py", "tests": {"0": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371f235e0>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371c16310>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_return_status_200", "rerun": "0"}, "1": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371a0f310>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371a0ff40>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_return_no_mathching_email_message", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}, "4": {"suite_name": "tests/unit_tests/test_purchasePlaces.py", "tests": {"0": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd3719c5730>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd3719c5d00>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_should_return_error_message_when_club_try_to_redeem_more_points_than_available", "rerun": "0"}, "1": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371d01730>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371d01310>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_club_points_should_be_deducted_after_redeemed", "rerun": "0"}, "2": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371f23550>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371f4ae20>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_places_should_be_deducted_from_the_competition_when_redeemed", "rerun": "0"}, "3": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371dc1e50>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371dc19d0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_club_should_be_able_to_book_12_or_less_place_per_competition", "rerun": "0"}, "4": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371acd550>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371acda00>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_club_should_not_be_able_to_book_more_than_12_place_per_competition_at_once", "rerun": "0"}, "5": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371db0670>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371db05e0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_club_should_not_be_able_to_book_more_than_12_place_per_competition_in_multiple_time", "rerun": "0"}, "6": {"status": "ERROR", "message": "mocker = <pytest_mock.plugin.MockerFixture object at 0x7fd371c16070>\n\n    @pytest.fixture\n    def testing_data(mocker):\n        path_clubs_json = mocker.patch.object(server, \"PATH_CLUBS\", PATH_CLUBS_TESTS)\n        path_competitions_json = mocker.patch.object(\n            server, \"PATH_COMPETITIONS\", PATH_COMPETITIONS_TESTS\n        )\n        competitions = server.loadCompetitions()\n        clubs = server.loadClubs()\n        reserved_places = {\n            competition[\"name\"]: {club[\"name\"]: 0 for club in clubs}\n            for competition in competitions\n        }\n    \n        competitions_test = mocker.patch.object(server, \"competitions\", competitions)\n        clubs_test = mocker.patch.object(server, \"clubs\", clubs)\n>       reserved_places = mocker.patch.object(server, \"reserved_places\", reserved_places)\n\ntests/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:219: in object\n    return self._start_patch(\n../env/lib/python3.8/site-packages/pytest_mock/plugin.py:183: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.8/unittest/mock.py:1529: in start\n    result = self.__enter__()\n/usr/lib/python3.8/unittest/mock.py:1393: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unittest.mock._patch object at 0x7fd371c16ca0>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n>           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'P11_Python_Testing.server' from '/home/paul/Documents/Workplaces/Formation/ocr_P11/P11_Python_Testing/server.py'> does not have the attribute 'reserved_places'\n\n/usr/lib/python3.8/unittest/mock.py:1366: AttributeError\n", "test_name": "test_shoul_not_be_able_to_book_past_competitions", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 7}}}}, "date": "July 04, 2022", "start_time": 1656940406.4668007, "total_suite": 5, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "13", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "13"}